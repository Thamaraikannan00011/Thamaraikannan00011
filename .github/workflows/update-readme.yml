name: Update README with Dynamic Stats

on:
  schedule:
    # Runs every 4 hours
    - cron: '0 */4 * * *'
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  update-readme:
    name: Update README with latest stats
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm install -g @octokit/rest
          npm install axios

      - name: Update GitHub Stats
        run: |
          cat << 'EOF' > update_stats.js
          const { Octokit } = require('@octokit/rest');
          const fs = require('fs');

          const octokit = new Octokit({
            auth: process.env.GITHUB_TOKEN
          });

          async function updateStats() {
            try {
              const username = 'Thamaraikannan00011';
              
              // Get user repositories
              const { data: repos } = await octokit.rest.repos.listForUser({
                username: username,
                per_page: 100
              });

              // Get user data
              const { data: user } = await octokit.rest.users.getByUsername({
                username: username
              });

              // Calculate total lines of code across all repositories
              let totalLinesOfCode = 0;
              let totalCommits = 0;

              for (const repo of repos) {
                if (!repo.fork) {
                  // Get languages for each repo
                  try {
                    const { data: languages } = await octokit.rest.repos.listLanguages({
                      owner: username,
                      repo: repo.name
                    });
                    
                    // Sum up lines of code from all languages
                    for (const [lang, lines] of Object.entries(languages)) {
                      totalLinesOfCode += lines;
                    }

                    // Get commit count for each repo
                    const { data: commits } = await octokit.rest.repos.listCommits({
                      owner: username,
                      repo: repo.name,
                      per_page: 100,
                      author: username
                    });
                    totalCommits += commits.length;
                  } catch (error) {
                    console.log(`Error processing ${repo.name}:`, error.message);
                  }
                }
              }

              // Format numbers
              const formatNumber = (num) => {
                if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
                if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
                return num.toString();
              };

              // Read current README
              let readme = fs.readFileSync('README.md', 'utf8');

              // Update the about section
              const aboutSection = `\`\`\`yaml
          name: "THAMARAIKANNAN"
          role: "Java Backend Developer with DevOps"
          location: "Dharmapuri, Tamil Nadu, India"
          education: "BE Electronics & Communication Engineering"
          college: "Excel Engineering College"
          academic_performance: "80% with 95%+ Attendance"
          passion: "Building robust backend systems and APIs"
          current_focus: "DevOps practices and automation"
          total_repositories: "${repos.length}"
          total_commits: "${formatNumber(totalCommits)}"
          lines_of_code: "${formatNumber(totalLinesOfCode)}+"
          \`\`\``;

              // Replace the about section
              readme = readme.replace(
                /<!--START_SECTION:about-->[\s\S]*?<!--END_SECTION:about-->/,
                `<!--START_SECTION:about-->\n${aboutSection}\n<!--END_SECTION:about-->`
              );

              // Update metrics section
              const metricsSection = `- üìù **Total Lines of Code**: ${formatNumber(totalLinesOfCode)}+
          - üóÇÔ∏è **Total Repositories**: ${repos.length}
          - üìã **Total Commits**: ${formatNumber(totalCommits)}+
          - üß™ **Unit Test Coverage**: 75%
          - üêõ **Bug Fix Rate**: 95%
          - ‚ö° **Response Time**: < 24 hours`;

              readme = readme.replace(
                /<!--START_SECTION:metrics-->[\s\S]*?<!--END_SECTION:metrics-->/,
                `<!--START_SECTION:metrics-->\n${metricsSection}\n<!--END_SECTION:metrics-->`
              );

              // Write updated README
              fs.writeFileSync('README.md', readme);
              
              console.log(`‚úÖ Updated stats: ${totalCommits} commits, ${formatNumber(totalLinesOfCode)} lines of code across ${repos.length} repositories`);
              
            } catch (error) {
              console.error('Error updating stats:', error);
              process.exit(1);
            }
          }

          updateStats();
          EOF

          node update_stats.js
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Recent Activity
        uses: jamesgeorge007/github-activity-readme@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          COMMIT_MSG: 'ü§ñ Update README with recent activity'
          MAX_LINES: 8
          COMMIT_NAME: 'readme-bot'
          COMMIT_EMAIL: 'action@github.com'

      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "üìä Auto-update profile stats [$(date +'%Y-%m-%d %H:%M:%S')]"
            git push
          fi

---
